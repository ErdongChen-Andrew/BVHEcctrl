/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: sirsaugsage (https://sketchfab.com/sirsausage)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/fantasy-game-inn-192bf30a7e28425ab385aef19769d4b0
Title: Fantasy Game Inn
*/

import * as THREE from "three";
import { Clone, Helper, Merged, useGLTF, useHelper } from "@react-three/drei";
import { useEffect, useRef } from "react";

export default function InstancedMap(props) {
  // Load map model
  const bakeInnModel = useGLTF("./fantasy_game_inn.glb");

  const count = 10;
  const radius = 20;
  const instancedMeshRef = useRef();
  const temp = new THREE.Object3D();

  useEffect(() => {
    // Set positions
    for (let i = 0; i < count; i++) {
      const angle = (i / count) * Math.PI * 2;
      const x = Math.cos(angle) * radius;
      const z = Math.sin(angle) * radius;
      const y = 0;

      temp.position.set(x, y, z);
      temp.rotation.x = -Math.PI / 2;
      temp.scale.set(0.1, 0.1, 0.1);
      temp.updateMatrix();
      instancedMeshRef.current.setMatrixAt(i, temp.matrix);
    }
    // Update the instance
    instancedMeshRef.current.instanceMatrix.needsUpdate = true;
  }, []);

  return (
    <group {...props} dispose={null} position={[0,0,0]}>
      {/* <Clone object={bakeInnModel.scene} position={[-33, -8, -2]} /> */}
      {/* <mesh
        castShadow
        receiveShadow
        geometry={bakeInnModel.nodes.TheInn_bakeInn_0.geometry}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.11}
      >
        <meshStandardMaterial map={bakeInnModel.materials.bakeInn.map} />
      </mesh> */}

      <instancedMesh
        ref={instancedMeshRef}
        args={[
          bakeInnModel.nodes.TheInn_bakeInn_0.geometry,
          bakeInnModel.materials.bakeInn,
          count,
        ]}
      />
    </group>
  );
}

useGLTF.preload("./fantasy_game_inn.glb");
